AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Serverless Workflow Lab - Image Ingestion Lambda (Workflow 1)'

Parameters:
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket for storing images
    Default: serverless-lab-images-240925
  
  DynamoDBTableName:
    Type: String
    Description: Name of the DynamoDB table for storing metadata
    Default: image-metadata

Globals:
  Function:
    Timeout: 60
    Runtime: python3.9
    Environment:
      Variables:
        S3_BUCKET_NAME: !Ref S3BucketName
        DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName

Resources:
  ImageIngestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-image-ingestion"
      CodeUri: src/
      Handler: lambda_function.lambda_handler
      Description: 'Downloads image from URL, uploads to S3, stores metadata in DynamoDB'
      
      # IAM Policies
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3BucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
      
      # API Gateway Event (Optional - for HTTP invocation)
      Events:
        ImageIngestionApi:
          Type: Api
          Properties:
            Path: /ingest
            Method: post
            RestApiId: !Ref ImageIngestionApi

  # API Gateway for HTTP invocation
  ImageIngestionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'POST, OPTIONS'"
        AllowHeaders: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'"
        AllowOrigin: "'*'"

Outputs:
  ImageIngestionFunction:
    Description: "Image Ingestion Lambda Function ARN"
    Value: !GetAtt ImageIngestionFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ImageIngestionFunction-Arn"
  
  ImageIngestionFunctionName:
    Description: "Image Ingestion Lambda Function Name"
    Value: !Ref ImageIngestionFunction
    Export:
      Name: !Sub "${AWS::StackName}-ImageIngestionFunction-Name"
  
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL for Image Ingestion"
    Value: !Sub "https://${ImageIngestionApi}.execute-api.${AWS::Region}.amazonaws.com/prod/ingest"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref S3BucketName
    Export:
      Name: !Sub "${AWS::StackName}-S3Bucket"
  
  DynamoDBTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref DynamoDBTableName
    Export:
      Name: !Sub "${AWS::StackName}-DynamoTable"
